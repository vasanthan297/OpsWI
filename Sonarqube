export async function populateBranchAndPrProps(props: { [key: string]: string }) {
  const collectionUrl = tl.getVariable("System.TeamFoundationCollectionUri");
  const prId = tl.getVariable("System.PullRequest.PullRequestId");
  const provider = tl.getVariable("Build.Repository.Provider");
  if (prId) {
    props["sonar.pullrequest.key"] = prId;
    props["sonar.pullrequest.base"] = branchName(tl.getVariable("System.PullRequest.TargetBranch"));
    props["sonar.pullrequest.branch"] = branchName(
      tl.getVariable("System.PullRequest.SourceBranch")
    );
    if (provider === "TfsGit") {
      props["sonar.pullrequest.provider"] = "vsts";
      props["sonar.pullrequest.vsts.instanceUrl"] = collectionUrl;
      props["sonar.pullrequest.vsts.project"] = tl.getVariable("System.TeamProject");
      props["sonar.pullrequest.vsts.repository"] = tl.getVariable(REPO_NAME_VAR);
    } else if (provider === "GitHub" || provider === "GitHubEnterprise") {
      props["sonar.pullrequest.key"] = tl.getVariable("System.PullRequest.PullRequestNumber");
      props["sonar.pullrequest.provider"] = "github";
      props["sonar.pullrequest.github.repository"] = tl.getVariable(REPO_NAME_VAR);
    } else if (provider === "Bitbucket") {
      props["sonar.pullrequest.provider"] = "bitbucketcloud";
    } else {
      tl.warning(`Unsupported PR provider '${provider}'`);
      props["sonar.scanner.skip"] = "true";
    }
  }



<!DOCTYPE html>
<html>
<head>
  <title>Embedded PDF Example</title>
</head>
<body>
  <embed src="path/to/your/pdf.pdf" width="500" height="700" type="application/pdf">
  <!-- or -->
  <!-- <iframe src="path/to/your/pdf.pdf" width="500" height="700"></iframe> -->
</body>
</html>




- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'SonarQubeConnection'
    projectKey: 'YourProjectKey'
    projectName: 'YourProjectName'
    extraProperties: |
      sonar.login=$(sonar.login)
      $(if eq(variables['SomeCondition'], 'true'))sonar.host.url=$(sonar.host.url)$(endif)
      # Other properties...

