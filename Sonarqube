https://www.aviator.co/blog/implementing-sonarqube-code-coverage-in-a-simple-javascript-application/



https://docs.sonarqube.org/latest/analyzing-source-code/test-coverage/javascript-typescript-test-coverage/


https://community.sonarsource.com/t/sonarqube-on-azure-devops-ignores-test-execution-data-for-all-files/21531/3

https://stackoverflow.com/questions/57255304/azure-devops-extension-api-sdk-apis-error-when-using-in-pipeline-extension


https://github.com/parkhomenko/azure-build-task/blob/master/nodeFiles/index.ts

https://stackoverflow.com/questions/74429055/gitlab-ci-quality-gate-check-timeout-exceeded





import fs from 'fs';

function parseJSONFile(filePath: string): void {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf-8');
    const jsonData = JSON.parse(fileContent);
    console.log(jsonData);
  } catch (error) {
    console.error('Error parsing JSON file:', error);
  }
}



==================================================================================================================================





import { readFileSync } from 'fs';

interface Coordinate {
  aid: string;
  groupId: string;
  version: string;
}

interface Alert {
  trigger: {
    compo: {
      coordinate: Coordinate;
    }[];
  };
}

interface PolicyEvaluation {
  alerts: Alert[];
}

const jsonFilePath = 'path/to/your/json/file.json';

try {
  const fileContents = readFileSync(jsonFilePath, 'utf-8');
  const jsonData = JSON.parse(fileContents);

  const groupIdVersions: { groupId: string; version: string }[] = [];

  if (jsonData.policyeveluation && jsonData.policyeveluation.alerts) {
    const alerts: Alert[] = jsonData.policyeveluation.alerts;

    for (const alert of alerts) {
      if (alert.trigger && alert.trigger.compo) {
        const compoCoordinates = alert.trigger.compo;

        for (const coordinate of compoCoordinates) {
          if (coordinate.coordinate && coordinate.coordinate.groupId && coordinate.coordinate.version) {
            const { groupId, version } = coordinate.coordinate;
            groupIdVersions.push({ groupId, version });
          }
        }
      }
    }
  }

  console.log(groupIdVersions);
} catch (error) {
  console.error('Error reading or parsing the JSON file:', error);
}


// Usage
const filePath = '/path/to/file.json';
parseJSONFile(filePath);

