import tl = require('azure-pipelines-task-lib/task');
import http = require('http');
import https = require('https');

async function run() {
    try {
        // Get the ID of the secure file to download
        const secureFileId = tl.getInput('SecureFileId', true);

        // Get the access token to authenticate with Azure DevOps
        const azureDevOps = tl.getEndpointAuthorization('SYSTEMVSSCONNECTION', false);
        const token = azureDevOps.parameters['AccessToken'];

        // Set up the HTTP client to make API requests
        const httpProxy = tl.getHttpProxyConfiguration();
        const httpClient = new http.HttpClient('MyCustomTask', [httpProxy]);

        // Construct the URL to download the secure file
        const baseUrl = tl.getEndpointUrl('SYSTEMVSSCONNECTION', false);
        const downloadUrl = `${baseUrl}/_apis/distributedtask/securefiles/${secureFileId}?api-version=6.0`;

        // Set up the request headers
        const headers = {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/octet-stream'
        };

        // Download the secure file
        const response = await httpClient.get(downloadUrl, headers);
        const statusCode = response.message.statusCode;

        if (statusCode !== 200) {
            const errorMessage = `Failed to download secure file. Status code: ${statusCode}`;
            tl.setResult(tl.TaskResult.Failed, errorMessage);
            return;
        }

        // Save the secure file to disk
        const localFilePath = tl.getInput('LocalFilePath', true);
        const fileContents = await response.readBody();
        tl.writeFile(localFilePath, fileContents);
    } catch (err) {
        tl.setResult(tl.TaskResult.Failed, err.message);
    }
}

run();
